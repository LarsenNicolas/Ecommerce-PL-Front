// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tFvQGwEHDigbr25c6CkR5z
// Component: LtE43stEjM9r

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: tFvQGwEHDigbr25c6CkR5z/projectcss
import sty from "./PlasmicCopyrightSocialLanguage.module.css"; // plasmic-import: LtE43stEjM9r/css

import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: 4ILTuAht2EvX/icon
import YoutubeIcon from "./icons/PlasmicIcon__Youtube"; // plasmic-import: 2kTeNDyO0nlo/icon
import PintrestIcon from "./icons/PlasmicIcon__Pintrest"; // plasmic-import: aralSwPA-ihJ/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: 962b54x1Y4Qc/icon

createPlasmicElementProxy;

export type PlasmicCopyrightSocialLanguage__VariantMembers = {};
export type PlasmicCopyrightSocialLanguage__VariantsArgs = {};
type VariantPropType = keyof PlasmicCopyrightSocialLanguage__VariantsArgs;
export const PlasmicCopyrightSocialLanguage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCopyrightSocialLanguage__ArgsType = {};
type ArgPropType = keyof PlasmicCopyrightSocialLanguage__ArgsType;
export const PlasmicCopyrightSocialLanguage__ArgProps =
  new Array<ArgPropType>();

export type PlasmicCopyrightSocialLanguage__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultCopyrightSocialLanguageProps {
  className?: string;
}

const $$ = {};

function PlasmicCopyrightSocialLanguage__RenderFunc(props: {
  variants: PlasmicCopyrightSocialLanguage__VariantsArgs;
  args: PlasmicCopyrightSocialLanguage__ArgsType;
  overrides: PlasmicCopyrightSocialLanguage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yiee3)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nLiHi)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cKvCx
            )}
          >
            {"\u00a9 2021 ShoeShop, Inc. All Rights Reserved."}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ywLt)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__vBsoH
              )}
              platform={"react"}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg___7M1EB)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__mwyUf
              )}
              platform={"react"}
            >
              <YoutubeIcon
                className={classNames(projectcss.all, sty.svg__tjyn2)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__sivf1
              )}
              platform={"react"}
            >
              <PintrestIcon
                className={classNames(projectcss.all, sty.svg__ayv6A)}
                role={"img"}
              />
            </PlasmicLink__>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__tp38A)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pha
            )}
          >
            {"English"}
          </div>
          <Icon15Icon
            className={classNames(projectcss.all, sty.svg__b6Zif)}
            role={"img"}
          />
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopyrightSocialLanguage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopyrightSocialLanguage__VariantsArgs;
    args?: PlasmicCopyrightSocialLanguage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCopyrightSocialLanguage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCopyrightSocialLanguage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCopyrightSocialLanguage__ArgProps,
          internalVariantPropNames: PlasmicCopyrightSocialLanguage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCopyrightSocialLanguage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopyrightSocialLanguage";
  } else {
    func.displayName = `PlasmicCopyrightSocialLanguage.${nodeName}`;
  }
  return func;
}

export const PlasmicCopyrightSocialLanguage = Object.assign(
  // Top-level PlasmicCopyrightSocialLanguage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCopyrightSocialLanguage
    internalVariantProps: PlasmicCopyrightSocialLanguage__VariantProps,
    internalArgProps: PlasmicCopyrightSocialLanguage__ArgProps
  }
);

export default PlasmicCopyrightSocialLanguage;
/* prettier-ignore-end */
